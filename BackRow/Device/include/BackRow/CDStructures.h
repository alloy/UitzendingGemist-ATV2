//
//     Generated by class-dump 3.4 (64 bit) (Debug version compiled Mar  6 2013 16:24:16).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.
//

#pragma mark Function Pointers

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BRFocusEdge {
    struct CGPoint _field1;
    struct CGPoint _field2;
};

struct BRTimeRange {
    double _field1;
    double _field2;
};

//struct CATransform3D {
//    float m11;
//    float m12;
//    float m13;
//    float m14;
//    float m21;
//    float m22;
//    float m23;
//    float m24;
//    float m31;
//    float m32;
//    float m33;
//    float m34;
//    float m41;
//    float m42;
//    float m43;
//    float m44;
//};

struct NStatCounts {
    unsigned long long nstat_rxpackets;
    unsigned long long nstat_rxbytes;
    unsigned long long nstat_txpackets;
    unsigned long long nstat_txbytes;
    unsigned int nstat_rxduplicatebytes;
    unsigned int nstat_rxoutoforderbytes;
    unsigned int nstat_txretransmit;
    unsigned int nstat_connectattempts;
    unsigned int nstat_connectsuccesses;
    double nstat_min_rtt;
    double nstat_avg_rtt;
    double nstat_var_rtt;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    unsigned int :8;
    unsigned int :4;
    unsigned int :1;
    unsigned int :1;
    unsigned int :18;
    unsigned short _field1[8];
} CDStruct_5fe7aead;

typedef struct {
    struct {
        float _protected_n;
    } readonly_norm;
} CDStruct_1420b1e7;

typedef struct {
    CDStruct_1420b1e7 width;
    CDStruct_1420b1e7 height;
} CDStruct_83d0eb64;

// Template types
//typedef struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    //struct _Alloc_hider _field1;
//} basic_string_1cdf7af0;

//typedef struct shared_ptr<const netflix::ase::Manifest> {
    //struct Manifest *_field1;
    //struct __shared_count<2> _field2;
//} shared_ptr_3945d948;

//typedef struct shared_ptr<const std::vector<netflix::nccp::CdnEntity, std::allocator<netflix::nccp::CdnEntity>>> {
    //struct vector<netflix::nccp::CdnEntity, std::allocator<netflix::nccp::CdnEntity>> *_field1;
    //struct __shared_count<2> _field2;
//} shared_ptr_c536d03f;

//typedef struct shared_ptr<netflix::EDSClient::CdnSelection> {
    //struct CdnSelection *_M_ptr;
    //struct __shared_count<2> _M_refcount;
//} shared_ptr_8a671fb9;

//typedef struct shared_ptr<netflix::ase::ManifestStream> {
    //struct ManifestStream *_field1;
    //struct __shared_count<2> _field2;
//} shared_ptr_0e4fb439;

//typedef struct vector<unsigned char, std::allocator<unsigned char>> {
    //struct _Vector_impl {
        //char *_field1;
        //char *_field2;
        //char *_field3;
    //} _field1;
//} vector_531f5ac1;

